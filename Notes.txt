Section 1 : Getting Started

- What is React
• React is a library
• Renders view and Syncing view with state
• React application is a Tree of components
• Component
A Javascript class having
state and
render method - outputs React element (maps itself to DOM element)
• Virtual DOM : lightweight representation of DOM in memory, cheap to create
• On change of Component state -> New react element is created -> React compares it to older element for changes and updates Real DOM.

- Setting up development environment
• Install node js from nodejs.org
• Install VS Code
• VS Code extensions 
Simple React Snippets (Burke Holland)
Prettier (Esben Petersen)
• Enable formatting on save : Settings > User settings > editor.formatOnSave : true

- First React App
• Run : npx create-react-app appname
Installed are : 
development server,
webpack : bundling files,
babel : compiling javascript code.
• For customizing configuration : eject using : npm run eject
• Go to folder and launch server : npm start
• Folder structure
node_modules - containing 3rd party libraries and react
public - public assets of application
src - components of application
App.js - base component
index.js - entry point of application
• JSX - Javascript XML
• Babel converts JSX into javascript code.

- Hello World
• Delete all files in src folder
• create index.js in src
• Add import as
import React from 'react';
import ReactDOM from 'react-dom';
• Create element as
const element = <h1>Hello World</h1>;
• Rendering on DOM
ReactDOM.render(element, document.getElementById('root'));

- Custom configs
• We need to eject as
• npm run eject
---------------------------------------------------------------

Section 2 : ES6 Refresher
Let/Const, Objects, this, Arrow Funcs,
Destructuring, Spread, Classes, Modules

- let vs  var vs const
var - accessible anywhere in defined function
let - accessible only in defined block
const - accessible only in defined block, can be defined once.

- objects
are collection of key value pairs
method - function defined in a object
Accessing members
1. dot notation -> obj.member
2. bracket notation -> obj['member']

- this keyword
if used in method of object - returns reference to the object
if used in standalone function - returns global object (undefined / window object)

- binding this
Functions are object in Javascript
func.bind(obj) - returns new func instance with this keyword refer to obj

- Arrow functions
Single parameter - brackets can be excluded
Single line and return - curly brackets and return keyword can be removed.
Don't rebind this keyword.
this and arguments keyword are inherited from their defined scope.
new keyword cannot be used.

- Array.map function
• For mapping array to a function
• Generates a new array with result

- Object destructuring
const { field1, field2: newField } = obj;

- Spread operator
• const combined = [...firstArray, ...secondArray];
• Cloning : const clone = [...first];
• spreading object : const combined = {...first, ...second};

- Classes
• Blueprint for objects
• Constructor : constructor(...) {}
• new keyword is used to create objects

- Inheritance
• using extends keyword
• Constructor in child should have super(...)

- Modules
• Exporting class
Named export - export class ClassName
Default export - export default class ClassName
• Importing class
Named import - import { ClassName } from './className'
Default import - import ClassName from './className'
---------------------------------------------------------------

Section 3 : Components

- Setting up the Project
• Create app counter-app
• Start application : npm start
• Install bootstrap
npm i bootstrap@4.1.1
Import in index.js : import 'bootstrap/dist/css/bootstrap.css'

- First React Component
• Create folder src/components/
• Create file counter.jsx
• Import component
imrc : import React, { Component } from 'react';
cc : create class component
• Remove state property
• Modify render method, return h1 with Hello World
• In index.js
import Counter class
import Counter from './components/counter';
Replace <App /> with <Counter />
• Putting two elements side by side : React.Fragment

- Embedding Expressions
• state : object containing component data
• Add state object : state = { count : 0 };
• Render dynamically
<span>{this.state.count}</span>

- Setting Attributes
<img src={this.state.imageUrl} alt=""/>
• class attribute : className
• style attribute should be set to Plain JS object : style={{...}}

- Rendering Classes dynamically
• Define a method for conditionally returning classes string : getBadgeClasses
• Add it to className attribute of span : className={this.getBadgeClasses()}

- Rendering Lists
• Lists in JSX
• Each item should have key attribute with unique value.
map function : {this.state.tags.map(t => <li key={t.id}>t</li>) }

- Conditional Rendering
Using plain javascript if else.

- Handling Events (Standard DOM Events)
• Click : onClick={this.methodName}
• this is undefined for methodName for onClick

- Binding Event Handlers
• Bind this in constructor as
this.methodName = this.methodName.bind(this)
• Or use arrow function for methodName

- Updating the State
• We do not modify state directly
• React should be aware of change
• Using setState method
this.setState({ count: this.state.count+1});

- What Happens when state changes
• setState : tells react component state will be changed
• React schedules call of render method
it returns new React element
it is compared with old virtual dom
and changes are applied to Real DOM 

- Passing Event Arguments
• onClick={() => this.methodName(someVar)}

- Setting up the Vidly Project
• Creat app named vidly
• Install 2 libraries : bootstrap@4.1.1, font-awesome@4.7.0
• In index.js
Import bootstrap : 'bootstrap/dist/css/boostrap.css'
Import font-awesome : 'font-awesome/css/font-awesome.css'
• Start project : npm start
• In App.js
Change render method to return : <main className="container">
<h1></h1></main>
• Copy services folder from Resources.zip
---------------------------------------------------------------

Section 4 : Composing Components

- Passing Data to components
• this.props : object containing attributes passed to the component.

- Passing Children
• this.props.children : children passed between <Comp>...</Comp>

- Debugging React Apps
• Chrome extension : React Developer Tools
• $0 in elements window : to get currently selected element

- Props vs State
• Props : data given to component, Read only
• State : data which is local or private to component

- Raising and Handling Events
• The component that owns a piece of the state, should be the one modifying it.
• Handle event function can be passed as attribute to child components.
• Child components on an action can call that function.

- Single source of truth
• First line of state initialization is only run once.
• Remove local state from child components converting them to Controlled Component, it raises events when data is to be changed.

- Lifting State up
• When there is no parent child relationship between components.
• Keeping them in sync
• Share data between them

- Stateless functional components
• Where there are no event handlers, helper methods and state.
• No 'this' keyword
• Add props as parameter
• Shortcut : sfc

- Destructuring arguments
• Using object destructuring for props parameter in sfc.

- Lifecycle Hooks
• Mount : 
Component instance is created and inserted into DOM.
hooks : constructor -> render -> componentDidMount
• Update :
When state or props of a component gets changed
hooks : render -> componentDidUpdate
• Unmount : 
When component is removed from DOM
hooks : componentWillUnmount

- Mounting phase
• constructor : initializing properties, set state based on props using constructor(props) and super(props).
• componentDidMount : After component is rendered and all children are mounted, making ajax call to get data from server.

- Update phase
• componentDidUpdate(prevProps, prevState) : After component is updated. We can compare old and new states and old and new props and make ajax request accordingly.

- Unmount phase
• componentWillUnmount : Before component is removed. Doing cleanup.




-----------------------
Shortcuts
Ctrl + P : Go to File


Solution - Decrement Button completed
